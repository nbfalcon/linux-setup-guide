#+title: Fedora post-installation setup for a fully working system
* Enable hibernation :optional:
Note that this may be unnecessary! The fedora install on my workstation had
working swap/hibernate OOTB (using systemd ~swap.target~).
** Check if everything is already configured (this won't be the case out of the box)
*Important*: check the following steps only after rebooting! Things may work
 only on the first boot.
*** Do we already have working hibernation? Then don't do anything else and skip the entire [[Enable hibernation]] step.
#+begin_src shell
cat /sys/power/resume
#+end_src

If this is not ~0:0~ but has actual, valid numbers (this would be a UNIX device
~major:minor~ identifier, see ~Linux Device Drivers, third edition~),
hibernation should work. Try hibernating and see if the system resumes properly.
Otherwise, proceed with the steps below.
*** Do we already have a working swap partition? Then skip the [[Swap partitions]] step below, and continue to dracut.
#+begin_src shell
$ sudo swapon
NAME           TYPE      SIZE USED PRIO
/dev/nvme0n1p6 partition   8G 1.5G   -2
/dev/zram0     partition 7.6G 7.6G  100
#+end_src
Is there a line other than ~/dev/zram0~ as large as your RAM? Then you are done
and don't need to add anything to fstab.
** Swap partitions
*** Find the swap partition
#+NAME: swap_uuid
#+begin_src shell :results output
swap_partition=($(sudo lsblk --list --noheadings -o NAME,UUID,FSTYPE | awk '$3 == "swap" { print $1, $2 }'))
echo "Setting up swap/hibernate on ${swap_partition[0]} UUID=${swap_partition[1]}" >&2
echo ${swap_partition[1]}
#+end_src
*** Add to ~/etc/fstab~
#+begin_src shell :var SWAP_UUID=swap_uuid
# Check if /etc/fstab contains a line with UUID=$SWAP_UUID
if grep -q "UUID=$SWAP_UUID" /etc/fstab; then
    echo "UUID=$SWAP_UUID entry already exists in /etc/fstab."
else
    # If not, append "UUID=$SWAP_UUID none swap sw 0 0"
    echo "UUID=$SWAP_UUID none swap sw 0 0" | sudo tee -a /etc/fstab
    echo "Added UUID=$SWAP_UUID entry to /etc/fstab."
fi
#+end_src
** ~/etc/default/grub~
This file should contain a ~RESUME=UUID=...~ part in the ~GRUB_CMDLINE_LINUX~
option (should be this way ootb). It should contain the UUID determined in step
[[Find the swap partition]].
** Add resume module to dracut
#+begin_src shell
sudo tee /etc/dracut.conf.d/10_resume.conf <<EOF
# Enable Hibernation (via resume module)
add_dracutmodules+=" resume "
EOF
#+end_src
** Rebuild initramfs
#+begin_src shell
sudo dracut -f
#+end_src
* Set-up nonfree Repos ([[https://docs.fedoraproject.org/en-US/quick-docs/rpmfusion-setup/][Enabling the RPM Fusion repositories :: Fedora Docs]])
- Codecs are required to play any videos. YouTube in Firefox will not work without this
- NVIDIA drivers are useful
** Load the repos
#+begin_src shell
sudo dnf install \
    https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
    https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
sudo dnf update -y
#+end_src
** Install FFmpeg with nonfree codecs so that firefox can play video
Note that we have to install this instead of the previously installed "free"
ffmpeg, so we need ~--allowerasing~.
#+begin_src shell
sudo dnf install --allowerasing ffmpeg
#+end_src
** "Enable AppStream"
#+begin_src shell
sudo dnf group update core
#+end_src
* Cleanup
- Don't use DNF to install PyCharm. This is bad because
  + old versions
  + "unoffical" approach
- Also we have JetBrains Toolbox, infinitely more convenient
#+begin_src shell
sudo dnf config-manager --set-disabled copr:copr.fedorainfracloud.org:phracek:PyCharm
#+end_src
* NVIDIA? :optional:
- OpenGL/DRM
- Cuda
- Accelerated video decode
#+begin_src shell
sudo dnf install akmod-nvidia vulkan xorg-x11-drv-nvidia-cuda nvidia-vaapi-driver libva-utils vdpauinfo
#+end_src
* Install basic packages
#+begin_src shell
sudo dnf install keepassxc emacs neovim ripgrep graphviz
#+end_src
* Install useful apps
#+begin_src shell
sudo dnf install kgraphviewer cantor maxima maxima-runtime-sbcl thunderbird okular filelight
#+end_src
* Install LaTeX :optional:
#+begin_src shell
sudo dnf install texlive-scheme-full
#+end_src
* Migrate from GNOME to KDE :optional:
** Install KDE
#+begin_src shell
sudo dnf groupinstall "KDE Plasma Workspaces"
#+end_src
** COMMENT (outdated) Set as default desktop
#+begin_src shell
echo "DESKTOP=KDE" | sudo tee /etc/sysconfig/desktop
#+end_src
** Use SDDM
#+begin_src shell
sudo systemctl disable gdm
sudo systemctl enable sddm
#+end_src
* Enable hybrid-sleep/automatic sleep+hibernate in KDE :norestart:
** systemd: ~/etc/systemd/sleep.conf~
Edit ~/etc/systemd/sleep.conf~, and change the following entries (the ones not
commented out)

Note that you can configure the ~HibernateMode~ and ~HibernateSleepMode~ to be
shutdown, if your BIOS implements them in and undesirable way (i.e. does not
_fully_ turn off the computer, and allows keyboard wakeup)
#+begin_src conf
[Sleep]
#AllowSuspend=yes
#AllowHibernation=yes
AllowSuspendThenHibernate=yes
#AllowHybridSleep=yes
#SuspendMode=
#SuspendState=mem standby freeze
#HibernateMode=platform shutdown
# Note: possibly select shutdown here
#HibernateState=disk
#HybridSleepMode=suspend platform shutdown
#HybridSleepState=disk
HibernateDelaySec=300 # 1800 # = 30min * 60 might be more appropriate on a desktop workstation
#SuspendEstimationSec=60min
#+end_src

Reload the configuration (no reboot required)
#+begin_src shell
sudo systemctl daemon-reload
#+end_src
** systemd: ~/etc/systemd/logind.conf~
Edit the following uncommented lines. The LidSwitchIgnoreInhibited=no line is
important!
#+begin_src conf
[Login]
#NAutoVTs=6
#ReserveVT=6
#KillUserProcesses=no
#KillOnlyUsers=
#KillExcludeUsers=root
#InhibitDelayMaxSec=5
#UserStopDelaySec=10
#HandlePowerKey=poweroff
#HandlePowerKeyLongPress=ignore
#HandleRebootKey=reboot
#HandleRebootKeyLongPress=poweroff
#HandleSuspendKey=suspend
#HandleSuspendKeyLongPress=hibernate
#HandleHibernateKey=hibernate
#HandleHibernateKeyLongPress=ignore
# The following is only relevant on the login screen without a desktop session, since KDE inhibits it
HandleLidSwitch=suspend-then-hibernate
HandleLidSwitchExternalPower=suspend-then-hibernate
HandleLidSwitchDocked=ignore
#PowerKeyIgnoreInhibited=no
#SuspendKeyIgnoreInhibited=no
#HibernateKeyIgnoreInhibited=no
LidSwitchIgnoreInhibited=no
#RebootKeyIgnoreInhibited=no
#HoldoffTimeoutSec=30s
#IdleAction=ignore
#+end_src
** KDE power manager auto-sleep/hibernate
- KDE has this feature under ~Energy Saving -> Suspend session -> sleep~
  + ~-> automatically after 10min~
  + ~-> While asleep, hibernate...~
The system will then enter a "sleep" state, from which it will then hibernate
automatically after ~HibernateDelaySec~ seconds (see above.)

Note that you can also check the option to have the PC hibernate if the power
button is checked here (makes sense on a workstation, since it isn't portable),
making power-off quick.
* QT Development :optional:wsl2:
#+begin_src shell
sudo dnf install clang-tools-extra qtcreator cmake 'qt6-*-devel'
#+end_src
