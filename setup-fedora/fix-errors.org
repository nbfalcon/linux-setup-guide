#+title: Fix Errors
* How to install Fedora on an existing root or ~/home~ partition ("You must create a new file system on the root device.")
1. mount it from gnome disks (click the play icon)
2. cd into it, and delete all non-home folders (i.e. delete the old installation)
   #+begin_src shell
$ cd /media/liveuser/_home
$ rm -rf bin/ sbin/ ... # important: do not delete home!!!
   #+end_src
3. Move the home folder to a different name, like ~oldhome~. I don't know if it
   would be overwritten, and it is best to take configs like .profile from the
   new installation anyway and copy over the old user's files.
4. Patch liveinst to accept an existing root partition (if you select the
   existing root partition as the target, liveinst will complain that it isn't
   formatted/new; this is precisely what we don't want to, though, and the error
   is irrelevant. liveinst won't format the partition if you don't configure it
   to, at least on Fedora 39). ~pyanaconda~ is the installer.

   Credits go to: [[https://discussion.fedoraproject.org/t/reinstall-fedora-without-formatting-the-disk-keeping-data/67701/13][Reinstall Fedora without formatting the disk (keeping data) - #13 by udavidso...]]
   #+begin_src shell
cd /usr/lib64/python3*/site-packages/pyanaconda/
grep -R 'create a new file system on the root device'
vi <filename>
   #+end_src
   Now you can use vi to patch out that if condition. It is simply wrong.
5. Now start liveinst, and select your existing root partition as the ~/~
   mountpoint. *Important*: do *not* select format! liveinst will now accept
   this without question, since we just removed the check.
6. Now you can proceed with the installation.
* When logging in via tty: "Change directory: /home/<user>" permission denied
** Error Message (tty)
#+begin_quote
-- user: /home/user: change directory failed: Permission denied
Logging in with /home="/".
#+end_quote
** Cause
selinux contexts for /home and /home/<user> are wrong.
** Fix (relabel home, home/user, and everything in the users home dir)
#+begin_src shell
sudo restorecon /home/*/*
#+end_src
* How to reinstall Grub from a Live ISO (if Linux is already installed)
** Mount the existing Linux root partition
It is important to mount the root partition directly; when using subvolumes,
only mount the root subvolume (-o subvol=@...). Otherwise grub-install gets
confused.
#+begin_src shell
mkdir /tmp/mnt
cd /tmp/
sudo mount /dev/nvme... mnt
#+end_src
** Setup chroot
#+begin_src shell
# tmp is so that the root's /tmp directory won't be cluttered; /tmp is tmpfs on a Live ISO.
for dir in dev sys run proc tmp; do
    sudo mount --bind /$dir mnt/$dir
done
sudo mkdir mnt/boot/efi
sudo mount --bind /dev/<efi partition> mnt/boot/efi

sudo chroot mnt
#+end_src
** grub-install
We now have a working Linux chroot (including sys, dev, etc.).

#+begin_src shell
sudo grub2-install
sudo grub2-mkconfig -o /boot/grub/grub2.cfg
#+end_src
** Make grub find /boot directory
Check ~/boot/efi/EFI/<distro name, e.g. fedora>~ (in chroot). It should look
like this (~@fedora~ is the btrfs subvolume; it could be called ~@/~ or
~@ubuntu~, etc.):
#+begin_src shell
search --no-floppy --fs-uuid --set=dev UUID_OF_ROOT_PARTITION
set prefix=($dev)/@fedora/boot/grub2 # btrfs
set prefix=($dev)/boot/grub2 # or: non-btrfs (e.g. ext4)

export $prefix
configfile $prefix/grub.cfg
#+end_src
* Grub: no "Linux" menu entries
** Error
- Grub is installed, but there is no "Linux" option in the boot menu
** Cause 1
Modern fedora uses "BLS" (BootLoaderSpec). Menu entries for linux are stored in
the ~/boot/loader/entries/~ directory. If it is empty, Linux cannot be booted
from Grub.

Also, BLS should be enabled (~/etc/default/grub~):
#+begin_src conf
...
GRUB_ENABLE_BLSCFG=true
...
#+end_src
** Cause 2: the grubenv file was moved ("manual messing with bootloader")
- In this case, open the command-line and run: "load_env ACTUAL_PATH_TO_GRUBENV"
- If there is no environment:
#+begin_src shell
set blsdir /boot/loader/entries
blscfg
#+end_src
** Fix
We can regenerate the entries directory (kernel updates should do that
automatically from then on).
#+begin_src shell
sudo grub2-switch-to-blscfg
#+end_src
* Grub: "sparse files are unsupported" error
** Error
Before boot, a non-fatal error may be printed along the lines of:
#+begin_quote
GRUB error: sparse file not allowed
#+end_quote
Pressing any key will continue boot. This will not have any effect on the
running system.

Furthermore, ~GRUB_SAVEDEFAULT~ will not work.
** Cause
- ~GRUB_SAVEDEFAULT~ is enabled
- The ~/boot~ directory (usually part of the root partition) is on a filesystem
  that grub cannot write, for example btrfs.

GRUB_SAVEDEFAULT will cause a ~load_env/save_env~ call to be generated
~/etc/grub.d/00_header~. ~save_env~ will write the [[https://www.gnu.org/software/grub/manual/grub/html_node/Environment-block.html][Environment block]] to a file
on the boot partition by default (~/boot/grub/grubenv~). This is not possible
for BTRFS, for example, causing the "sparse file not allowed error" (this is
probably because the GRUB cannot allocate a "non-sparse" file on BTRFS).

GRUB stores the environment to ~$config_directory/grubenv~ yb default (see [[https://www.gnu.org/software/grub/manual/grub/grub.html#config_005fdirectory][GNU
GRUB Manual 2.06]]). ~configfile~ (executed in ~/boot/efi/EFI/fedora/grub.cfg~
by default).
** (untested) Solution 1: use [[https://github.com/rhboot/grub2/blob/34e3dbc8ecc86e162c36f80e6a0fbc6000dc1801/grub-core/commands/efi/env.c#L162][efi-load-env/efi-export-env]]
- efi-load-env will store the grubenv block into an EFI variable (NVRAM/EEPROM
  chip internal to the system).
- For this, modify ~/etc/grub.d/10_linux~
** (untested) Solution 2
** Attemped non-solution: move grubenv to /boot/efi
This way, grub should detect it automatically and save the grubenv to the ESP
instead.

No it doesn't. It only looks in ~/boot/grub2/grubenv~.
#+begin_src shell
sudo mv /boot/grub2/grubenv /boot/efi/EFI/fedora/
#+end_src
* How to load a recovery USB stick from GRUB?
#+begin_src shell
Grub> ls
(hd0, gpt1) (hd1, gpt1)...
Grub> set root=(hd0,gpt1)
Grub> ls /efi/boot/
grubx64.efi

Comment: If the directory you just set as root does not contain
/EFI/<distroname>, it is not the installation stick. Try a different one from
the ls output above.

Grub> chainloader /efi/boot/grubx64.efi

This command does nothing at first. It just _configures_ what will be run next.

Grub> boot

Now the new grub should run, and system installation can commence.
#+end_src
* "My BIOS doesn't see my installed OS (Windows or Linux)"
The fix is via the ~efibootmgr~ command (similar to ~bcdedit~, but at UEFI not
bootloader level)
** Symptomps
- The BIOS doesn't see already and correctly installed operating systems
- The BIOS doesn't see Windows even after a reinstall and bcdboot hackery, but
  the EFI system partition seems healthy (i.e. has all the right fills in
  ~\EFI\Microsoft~, ~\EFI\fedora~)
- The BIOS contains invalid/outdated entries from previous distro-hopping
  installs
** List entries (including invalid)
#+begin_src shell
$ efibootmgr
BootCurrent: 0001
Timeout: 0 seconds
BootOrder: 0001,3001,2001,2002,0000,2004
Boot0000* Windows Boot Manager  HD(1,GPT,49...,0x40,0x82000)/File(\EFI\Microsoft\Boot\bootmgfw.efi)RC
Boot0001* Fedora        HD(1,GPT,49...,0x40,0x82000)/File(\EFI\fedora\shim.efi) File(.䍒)
Boot0002* Fedora        HD(1,GPT,49...,0x40,0x82000)/File(\EFI\fedora\shimx64.efi)
...
#+end_src
- ~...~ is some very long UUID, redacted for my privacy. (I don't know if this
  even has security implications)
- Note the ~*~ lines. These are ~active~, i.e. will show up in the BIOS boot
  selection menu.
- There should probably not be "MBR" entries. Recreate them properly (see below)
  and delete them afterwards
- Note the ~BootOrder:~ line. It is the list of entries to try booting, in order
  (this is usually what you would configure in the BIOS "GUI"). ~BootCurrent:~
  is the id of the currently booted entry.
** Delete an entry
Delete boot entry ~Boot0001~ (note that you don't specify the prefix for the -b
option. -B is confusingly the delete option! Probably because -d specifies a
device)
#+begin_src shell
$ efibootmgr -b 0001 -B
#+end_src
** Create an entry (for example, Windows)
- /dev/sda below is the drive with the EFI System Partition (could be nvme as
  well). The partition to select here is probably "2", because "1" is the
  Windows recovery folder.
- Note the Windows-style paths (with backslashes)
- Currently, there is no way to rename boot entries
#+begin_src shell
$ efibootmgr -d /dev/sda2 -L 'Windows Boot Manager' -l '\EFI\Microsoft\bootmgfw.efi' -c # Windows
$ efibootmgr -d /dev/sda2 -L 'Fedora' -l '\EFI\fedora\shimx64.efi' -c # Fedora
$ efibootmgr -c # Create a "Linux" boot entry for the current system (may only work on Fedora)
#+end_src
** Configure boot order
Configure the boot order (instead of going through BIOS GUI)
#+begin_src shell
$ efibootmgr -o 0001,0002
#+end_src
* Kernel lockdown: hibernation is disabled
** Cause
- Secure Boot does not allow hibernating to an unencrypted swap partition, as
  that is very much insecure
** Fix
- Encrypt the swap partition (i.e. a full-disk-encrypted Linux)
- Or: Disable secure boot in the Bios
* GRUB2: ~/EndEntire~ is printed (just _mildly_ annoying), but Windows still boots completely fine
- Source: some reddit post (I lost the link)
** Cause (not fully investigated)
- Something something UEFI entry type enum -> printf
** Fix: edit ~/etc/default/grub~ (also ~grub2-mkconfig -o /boot/grub2/grub.cfg~)
#+begin_src conf
GRUB_TERMINAL_OUTPUT="gfxterm"
#+end_src
